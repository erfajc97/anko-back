generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                   @id @default(uuid())
  email                       String                   @unique
  cedula                      String?                  @unique
  telephone                   String?                  @unique
  firstName                   String
  lastName                    String?
  createdAt                   DateTime                 @default(now())
  updatedAt                   DateTime                 @updatedAt
  password                    String
  hashedRefreshToken          String?
  isVerified                  Boolean                  @default(false)
  verificationToken           String?
  verificationTokenExpiresAt  DateTime?
  resetPasswordToken          String?
  resetPasswordTokenExpiresAt DateTime?
  resetPasswordRequestedAt    DateTime?
  type                        UserType                 @default(USER)
  bookings                    Booking[]
  memberships                 OrganizationMembership[]
  userPackages                UserPackage[]
  paymentTransactions         PaymentTransaction[]
}

model Organization {
  id          String                   @id @default(uuid())
  name        String
  createdAt   DateTime                 @default(now())
  memberships OrganizationMembership[]
}

model OrganizationMembership {
  id             String                 @id @default(uuid())
  organizationId String
  userId         String
  role           OrganizationMemberRole @default(MEMBER)
  createdAt      DateTime               @default(now())
  organization   Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model Teacher {
  id        String          @id @default(uuid())
  firstName String
  lastName  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  schedules ClassSchedule[]
}

model ClassPackage {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?
  price        Float
  classCredits Int
  validityDays Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userPackages UserPackage[]
  paymentTransactions PaymentTransaction[]
}

model UserPackage {
  id               String       @id @default(uuid())
  userId           String
  classPackageId   String
  remainingCredits Int
  expiresAt        DateTime
  purchasedAt      DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  classPackage     ClassPackage @relation(fields: [classPackageId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClassSchedule {
  id          String    @id @default(uuid())
  teacherId   String
  title       String
  startTime   DateTime
  endTime     DateTime
  maxCapacity Int       @default(8)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Booking {
  id              String        @id @default(uuid())
  userId          String
  classScheduleId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  status          BookingStatus @default(ACTIVE)
  classSchedule   ClassSchedule @relation(fields: [classScheduleId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, classScheduleId])
}

model PaymentTransaction {
  id                  String   @id @default(cuid())
  userId              String
  packageId           String
  clientTransactionId String   @unique
  amount              Decimal
  status              String   @default("pending") // pending, completed, failed
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  package ClassPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@map("payment_transactions")
}

enum OrganizationMemberRole {
  MANAGER
  MEMBER
}

enum UserType {
  USER
  ADMIN
}

enum BookingStatus {
  ACTIVE
  CANCELLED
}
