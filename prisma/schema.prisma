// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  telephone String?
  firstName String
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String
  hashedRefreshToken String?

  isVerified                 Boolean  @default(false)
  verificationToken          String?
  verificationTokenExpiresAt DateTime?

  // Campos para reset de contrase√±a
  resetPasswordToken          String?
  resetPasswordTokenExpiresAt DateTime?
  resetPasswordRequestedAt    DateTime?

  memberships OrganizationMembership[]
  type        UserType                 @default(USER)

  // Relaciones para el sistema de clases
  userPackages UserPackage[]
  bookings     Booking[]
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  memberships OrganizationMembership[]
}

model OrganizationMembership {
  id             String                 @id @default(uuid())
  organizationId String
  userId         String
  role           OrganizationMemberRole @default(MEMBER)
  createdAt      DateTime               @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

enum OrganizationMemberRole {
  MANAGER
  MEMBER
}

enum UserType {
  USER
  ADMIN
}

model Teacher {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedules ClassSchedule[]
}

model ClassPackage {
  id           String   @id @default(uuid())
  name         String   @unique
  price        Float
  classCredits Int
  validityDays Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userPackages UserPackage[]
}

model UserPackage {
  id               String       @id @default(uuid())
  userId           String
  classPackageId   String
  remainingCredits Int
  expiresAt        DateTime
  purchasedAt      DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  classPackage ClassPackage @relation(fields: [classPackageId], references: [id], onDelete: Cascade)
}

model ClassSchedule {
  id          String   @id @default(uuid())
  teacherId   String
  title       String
  startTime   DateTime
  endTime     DateTime
  maxCapacity Int      @default(8)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher  Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  bookings Booking[]
}

model Booking {
  id              String        @id @default(uuid())
  userId          String
  classScheduleId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  status          BookingStatus @default(ACTIVE)

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  classSchedule ClassSchedule @relation(fields: [classScheduleId], references: [id], onDelete: Cascade)

  @@unique([userId, classScheduleId])
}

enum BookingStatus {
  ACTIVE
  CANCELLED
}